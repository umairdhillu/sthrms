package com.soltechsystem.model.hr.LeaveManagement.ViewObject;

import com.soltechsystem.model.hr.LeaveManagement.Entity.EmployeeLeavesImpl;

import java.math.BigDecimal;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Timestamp;

import oracle.adf.share.ADFContext;

import oracle.jbo.AttributeList;
import oracle.jbo.RowSet;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Apr 18 12:17:04 PKT 2019
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class EmployeeLeavesViewRowImpl extends ViewRowImpl {


    public static final int ENTITY_EMPLOYEELEAVES = 0;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    protected enum AttributesEnum {
        LeaveId,
        LeaveType,
        LeaveStatus,
        LeaveFrom,
        LeaveTo,
        EmployeeId,
        CreatedBy,
        CreationDate,
        UpdatedBy,
        UpdationDate,
        VersionNumber,
        Department,
        Designation,
        EmployeeName,
        LeaveManagementAM_LeaveTypesList1_1,
        HRAM_EmployeeList1_1;
        private static AttributesEnum[] vals = null;
        ;
        private static final int firstIndex = 0;

        protected int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        protected static final int firstIndex() {
            return firstIndex;
        }

        protected static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        protected static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int LEAVEID = AttributesEnum.LeaveId.index();
    public static final int LEAVETYPE = AttributesEnum.LeaveType.index();
    public static final int LEAVESTATUS = AttributesEnum.LeaveStatus.index();
    public static final int LEAVEFROM = AttributesEnum.LeaveFrom.index();
    public static final int LEAVETO = AttributesEnum.LeaveTo.index();
    public static final int EMPLOYEEID = AttributesEnum.EmployeeId.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int CREATIONDATE = AttributesEnum.CreationDate.index();
    public static final int UPDATEDBY = AttributesEnum.UpdatedBy.index();
    public static final int UPDATIONDATE = AttributesEnum.UpdationDate.index();
    public static final int VERSIONNUMBER = AttributesEnum.VersionNumber.index();
    public static final int DEPARTMENT = AttributesEnum.Department.index();
    public static final int DESIGNATION = AttributesEnum.Designation.index();
    public static final int EMPLOYEENAME = AttributesEnum.EmployeeName.index();
    public static final int LEAVEMANAGEMENTAM_LEAVETYPESLIST1_1 =
        AttributesEnum.LeaveManagementAM_LeaveTypesList1_1.index();
    public static final int HRAM_EMPLOYEELIST1_1 = AttributesEnum.HRAM_EmployeeList1_1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public EmployeeLeavesViewRowImpl() {
    }

    /**
     * Gets EmployeeLeaves entity object.
     * @return the EmployeeLeaves
     */
    public EmployeeLeavesImpl getEmployeeLeaves() {
        return (EmployeeLeavesImpl) getEntity(ENTITY_EMPLOYEELEAVES);
    }

    /**
     * Gets the attribute value for LEAVE_ID using the alias name LeaveId.
     * @return the LEAVE_ID
     */
    public BigDecimal getLeaveId() {
        return (BigDecimal) getAttributeInternal(LEAVEID);
    }

    /**
     * Sets <code>value</code> as attribute value for LEAVE_ID using the alias name LeaveId.
     * @param value value to set the LEAVE_ID
     */
    public void setLeaveId(BigDecimal value) {
        setAttributeInternal(LEAVEID, value);
    }

    /**
     * Gets the attribute value for LEAVE_TYPE using the alias name LeaveType.
     * @return the LEAVE_TYPE
     */
    public BigDecimal getLeaveType() {
        return (BigDecimal) getAttributeInternal(LEAVETYPE);
    }

    /**
     * Sets <code>value</code> as attribute value for LEAVE_TYPE using the alias name LeaveType.
     * @param value value to set the LEAVE_TYPE
     */
    public void setLeaveType(BigDecimal value) {
        setAttributeInternal(LEAVETYPE, value);
    }

    /**
     * Gets the attribute value for LEAVE_STATUS using the alias name LeaveStatus.
     * @return the LEAVE_STATUS
     */
    public String getLeaveStatus() {
        return (String) getAttributeInternal(LEAVESTATUS);
    }

    /**
     * Sets <code>value</code> as attribute value for LEAVE_STATUS using the alias name LeaveStatus.
     * @param value value to set the LEAVE_STATUS
     */
    public void setLeaveStatus(String value) {
        setAttributeInternal(LEAVESTATUS, value);
    }

    /**
     * Gets the attribute value for LEAVE_FROM using the alias name LeaveFrom.
     * @return the LEAVE_FROM
     */
    public Timestamp getLeaveFrom() {
        return (Timestamp) getAttributeInternal(LEAVEFROM);
    }

    /**
     * Sets <code>value</code> as attribute value for LEAVE_FROM using the alias name LeaveFrom.
     * @param value value to set the LEAVE_FROM
     */
    public void setLeaveFrom(Timestamp value) {
        setAttributeInternal(LEAVEFROM, value);
    }

    /**
     * Gets the attribute value for LEAVE_TO using the alias name LeaveTo.
     * @return the LEAVE_TO
     */
    public Timestamp getLeaveTo() {
        return (Timestamp) getAttributeInternal(LEAVETO);
    }

    /**
     * Sets <code>value</code> as attribute value for LEAVE_TO using the alias name LeaveTo.
     * @param value value to set the LEAVE_TO
     */
    public void setLeaveTo(Timestamp value) {
        setAttributeInternal(LEAVETO, value);
    }

    /**
     * Gets the attribute value for EMPLOYEE_ID using the alias name EmployeeId.
     * @return the EMPLOYEE_ID
     */
    public BigDecimal getEmployeeId() {
        return (BigDecimal) getAttributeInternal(EMPLOYEEID);
    }

    /**
     * Sets <code>value</code> as attribute value for EMPLOYEE_ID using the alias name EmployeeId.
     * @param value value to set the EMPLOYEE_ID
     */
    public void setEmployeeId(BigDecimal value) {
        setAttributeInternal(EMPLOYEEID, value);
    }

    /**
     * Gets the attribute value for CREATED_BY using the alias name CreatedBy.
     * @return the CREATED_BY
     */
    public BigDecimal getCreatedBy() {
        return (BigDecimal) getAttributeInternal(CREATEDBY);
    }

    /**
     * Sets <code>value</code> as attribute value for CREATED_BY using the alias name CreatedBy.
     * @param value value to set the CREATED_BY
     */
    public void setCreatedBy(BigDecimal value) {
        setAttributeInternal(CREATEDBY, value);
    }

    /**
     * Gets the attribute value for CREATION_DATE using the alias name CreationDate.
     * @return the CREATION_DATE
     */
    public Timestamp getCreationDate() {
        return (Timestamp) getAttributeInternal(CREATIONDATE);
    }

    /**
     * Gets the attribute value for UPDATED_BY using the alias name UpdatedBy.
     * @return the UPDATED_BY
     */
    public BigDecimal getUpdatedBy() {
        return (BigDecimal) getAttributeInternal(UPDATEDBY);
    }

    /**
     * Sets <code>value</code> as attribute value for UPDATED_BY using the alias name UpdatedBy.
     * @param value value to set the UPDATED_BY
     */
    public void setUpdatedBy(BigDecimal value) {
        setAttributeInternal(UPDATEDBY, value);
    }

    /**
     * Gets the attribute value for UPDATION_DATE using the alias name UpdationDate.
     * @return the UPDATION_DATE
     */
    public Timestamp getUpdationDate() {
        return (Timestamp) getAttributeInternal(UPDATIONDATE);
    }

    /**
     * Gets the attribute value for VERSION_NUMBER using the alias name VersionNumber.
     * @return the VERSION_NUMBER
     */
    public BigDecimal getVersionNumber() {
        return (BigDecimal) getAttributeInternal(VERSIONNUMBER);
    }

    /**
     * Gets the attribute value for the calculated attribute Department.
     * @return the Department
     */
    public String getDepartment() {
        return (String) getAttributeInternal(DEPARTMENT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Department.
     * @param value value to set the  Department
     */
    public void setDepartment(String value) {
        setAttributeInternal(DEPARTMENT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Designation.
     * @return the Designation
     */
    public String getDesignation() {
        return (String) getAttributeInternal(DESIGNATION);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Designation.
     * @param value value to set the  Designation
     */
    public void setDesignation(String value) {
        setAttributeInternal(DESIGNATION, value);
    }

    /**
     * Gets the attribute value for the calculated attribute EmployeeName.
     * @return the EmployeeName
     */
    public String getEmployeeName() {
        return (String) getAttributeInternal(EMPLOYEENAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute EmployeeName.
     * @param value value to set the  EmployeeName
     */
    public void setEmployeeName(String value) {
        setAttributeInternal(EMPLOYEENAME, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LeaveManagementAM_LeaveTypesList1_1.
     */
    public RowSet getLeaveManagementAM_LeaveTypesList1_1() {
        return (RowSet) getAttributeInternal(LEAVEMANAGEMENTAM_LEAVETYPESLIST1_1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> HRAM_EmployeeList1_1.
     */
    public RowSet getHRAM_EmployeeList1_1() {
        return (RowSet) getAttributeInternal(HRAM_EMPLOYEELIST1_1);
    }

    @Override
    protected void create(AttributeList attributeList) {
        String empid = (ADFContext.getCurrent()
                                   .getSessionScope()
                                   .get("empid") == null) ? "-1" : ADFContext.getCurrent()
                                                                              .getSessionScope()
                                                                              .get("empid")
                                                                              .toString();
        
        
        setEmployeeId(new BigDecimal(empid));
        setDepartment(getDepartmentFromDB(getEmployeeId().intValue()));
        setDesignation(getDesignationFromDB(getEmployeeId().intValue()));
        setEmployeeName(getEmployeeNameFromDB(getEmployeeId().intValue()));
        
        super.create(attributeList);
    }
    
    /**
     *
     * @param employeeID
     * @return
     * Not being used currently
     */
    private String getDepartmentFromDB(int employeeID){
        System.out.println("getting department of empoyee_id:"+employeeID);
        String query = "select hd.department_name " + 
        "    from hr_employees he, " + 
        "    hr_departments hd " + 
        "    where he.department_id = hd.department_id " + 
        "    and he.employee_id =  "+employeeID;
        PreparedStatement pst=null;
        ResultSet rs = null;
        String department = "";
        try{
            pst = getDBTransaction().createPreparedStatement(query, 0);
            rs = pst.executeQuery();   
            rs.next();
            department = rs.getString("department_name");
        }catch(Exception ex){
            ex.printStackTrace();
            department = "Not Found";
        }
        return department;
    }
    private String getDesignationFromDB(int employeeID){
        System.out.println("getting designation of empoyee_id:"+employeeID);
        String query = "select hj.job_title " + 
        "    from hr_employees he, " + 
        "    hr_jobs hj " + 
        "    where he.job_id = hj.job_id " + 
        "    and he.employee_id =  "+employeeID;
        PreparedStatement pst=null;
        ResultSet rs = null;
        String designation = "";
        try{
            pst = getDBTransaction().createPreparedStatement(query, 0);
            rs = pst.executeQuery();   
            rs.next();
            designation = rs.getString("job_title");
        }catch(Exception ex){
            ex.printStackTrace();
            designation = "Not Found";
        }
        return designation;
    }
    
    private String getEmployeeNameFromDB(int employeeID){
        System.out.println("getting designation of empoyee_id:"+employeeID);
        String query = "select first_name||' '||last_name empname" + 
        "    from hr_employees " +  
        "    where employee_id =  "+employeeID;
        PreparedStatement pst=null;
        ResultSet rs = null;
        String employeeName = "";
        try{
            pst = getDBTransaction().createPreparedStatement(query, 0);
            rs = pst.executeQuery();   
            rs.next();
            employeeName = rs.getString("empname");
        }catch(Exception ex){
            ex.printStackTrace();
            employeeName = "Not Found";
        }
        return employeeName;
    }
}


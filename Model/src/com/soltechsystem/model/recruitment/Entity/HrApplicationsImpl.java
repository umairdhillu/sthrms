package com.soltechsystem.model.recruitment.Entity;

import java.math.BigDecimal;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Timestamp;

import oracle.adf.share.ADFContext;

import oracle.jbo.Key;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sun Apr 07 12:39:23 PKT 2019
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class HrApplicationsImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    protected enum AttributesEnum {
        ApplicationId,
        ApplicantName,
        ApplicantContact,
        ApplicantEmail,
        ApplicantPhone,
        ApplicantMobile,
        ApplicantDegree,
        VacancyId,
        ApplicationSource,
        ReferredBy,
        ExpectedSalary,
        ProposedSalary,
        ApplicantAvailability,
        CreatedBy,
        CreationDate,
        UpdatedBy,
        UpdationDate,
        VersionNumber,
        ShortList,
        InterviewRemarks;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        protected int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        protected static final int firstIndex() {
            return firstIndex;
        }

        protected static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        protected static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int APPLICATIONID = AttributesEnum.ApplicationId.index();
    public static final int APPLICANTNAME = AttributesEnum.ApplicantName.index();
    public static final int APPLICANTCONTACT = AttributesEnum.ApplicantContact.index();
    public static final int APPLICANTEMAIL = AttributesEnum.ApplicantEmail.index();
    public static final int APPLICANTPHONE = AttributesEnum.ApplicantPhone.index();
    public static final int APPLICANTMOBILE = AttributesEnum.ApplicantMobile.index();
    public static final int APPLICANTDEGREE = AttributesEnum.ApplicantDegree.index();
    public static final int VACANCYID = AttributesEnum.VacancyId.index();
    public static final int APPLICATIONSOURCE = AttributesEnum.ApplicationSource.index();
    public static final int REFERREDBY = AttributesEnum.ReferredBy.index();
    public static final int EXPECTEDSALARY = AttributesEnum.ExpectedSalary.index();
    public static final int PROPOSEDSALARY = AttributesEnum.ProposedSalary.index();
    public static final int APPLICANTAVAILABILITY = AttributesEnum.ApplicantAvailability.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int CREATIONDATE = AttributesEnum.CreationDate.index();
    public static final int UPDATEDBY = AttributesEnum.UpdatedBy.index();
    public static final int UPDATIONDATE = AttributesEnum.UpdationDate.index();
    public static final int VERSIONNUMBER = AttributesEnum.VersionNumber.index();
    public static final int SHORTLIST = AttributesEnum.ShortList.index();
    public static final int INTERVIEWREMARKS = AttributesEnum.InterviewRemarks.index();

    /**
     * This is the default constructor (do not remove).
     */
    public HrApplicationsImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("com.soltechsystem.model.recruitment.Entity.HrApplications");
    }


    /**
     * Gets the attribute value for ApplicationId, using the alias name ApplicationId.
     * @return the value of ApplicationId
     */
    public BigDecimal getApplicationId() {
        return (BigDecimal) getAttributeInternal(APPLICATIONID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ApplicationId.
     * @param value value to set the ApplicationId
     */
    public void setApplicationId(BigDecimal value) {
        setAttributeInternal(APPLICATIONID, value);
    }

    /**
     * Gets the attribute value for ApplicantName, using the alias name ApplicantName.
     * @return the value of ApplicantName
     */
    public String getApplicantName() {
        return (String) getAttributeInternal(APPLICANTNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for ApplicantName.
     * @param value value to set the ApplicantName
     */
    public void setApplicantName(String value) {
        setAttributeInternal(APPLICANTNAME, value);
    }

    /**
     * Gets the attribute value for ApplicantContact, using the alias name ApplicantContact.
     * @return the value of ApplicantContact
     */
    public String getApplicantContact() {
        return (String) getAttributeInternal(APPLICANTCONTACT);
    }

    /**
     * Sets <code>value</code> as the attribute value for ApplicantContact.
     * @param value value to set the ApplicantContact
     */
    public void setApplicantContact(String value) {
        setAttributeInternal(APPLICANTCONTACT, value);
    }

    /**
     * Gets the attribute value for ApplicantEmail, using the alias name ApplicantEmail.
     * @return the value of ApplicantEmail
     */
    public String getApplicantEmail() {
        return (String) getAttributeInternal(APPLICANTEMAIL);
    }

    /**
     * Sets <code>value</code> as the attribute value for ApplicantEmail.
     * @param value value to set the ApplicantEmail
     */
    public void setApplicantEmail(String value) {
        setAttributeInternal(APPLICANTEMAIL, value);
    }

    /**
     * Gets the attribute value for ApplicantPhone, using the alias name ApplicantPhone.
     * @return the value of ApplicantPhone
     */
    public String getApplicantPhone() {
        return (String) getAttributeInternal(APPLICANTPHONE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ApplicantPhone.
     * @param value value to set the ApplicantPhone
     */
    public void setApplicantPhone(String value) {
        setAttributeInternal(APPLICANTPHONE, value);
    }

    /**
     * Gets the attribute value for ApplicantMobile, using the alias name ApplicantMobile.
     * @return the value of ApplicantMobile
     */
    public String getApplicantMobile() {
        return (String) getAttributeInternal(APPLICANTMOBILE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ApplicantMobile.
     * @param value value to set the ApplicantMobile
     */
    public void setApplicantMobile(String value) {
        setAttributeInternal(APPLICANTMOBILE, value);
    }

    /**
     * Gets the attribute value for ApplicantDegree, using the alias name ApplicantDegree.
     * @return the value of ApplicantDegree
     */
    public BigDecimal getApplicantDegree() {
        return (BigDecimal) getAttributeInternal(APPLICANTDEGREE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ApplicantDegree.
     * @param value value to set the ApplicantDegree
     */
    public void setApplicantDegree(BigDecimal value) {
        setAttributeInternal(APPLICANTDEGREE, value);
    }

    /**
     * Gets the attribute value for VacancyId, using the alias name VacancyId.
     * @return the value of VacancyId
     */
    public BigDecimal getVacancyId() {
        return (BigDecimal) getAttributeInternal(VACANCYID);
    }

    /**
     * Sets <code>value</code> as the attribute value for VacancyId.
     * @param value value to set the VacancyId
     */
    public void setVacancyId(BigDecimal value) {
        setAttributeInternal(VACANCYID, value);
    }

    /**
     * Gets the attribute value for ApplicationSource, using the alias name ApplicationSource.
     * @return the value of ApplicationSource
     */
    public BigDecimal getApplicationSource() {
        return (BigDecimal) getAttributeInternal(APPLICATIONSOURCE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ApplicationSource.
     * @param value value to set the ApplicationSource
     */
    public void setApplicationSource(BigDecimal value) {
        setAttributeInternal(APPLICATIONSOURCE, value);
    }

    /**
     * Gets the attribute value for ReferredBy, using the alias name ReferredBy.
     * @return the value of ReferredBy
     */
    public String getReferredBy() {
        return (String) getAttributeInternal(REFERREDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for ReferredBy.
     * @param value value to set the ReferredBy
     */
    public void setReferredBy(String value) {
        setAttributeInternal(REFERREDBY, value);
    }

    /**
     * Gets the attribute value for ExpectedSalary, using the alias name ExpectedSalary.
     * @return the value of ExpectedSalary
     */
    public BigDecimal getExpectedSalary() {
        return (BigDecimal) getAttributeInternal(EXPECTEDSALARY);
    }

    /**
     * Sets <code>value</code> as the attribute value for ExpectedSalary.
     * @param value value to set the ExpectedSalary
     */
    public void setExpectedSalary(BigDecimal value) {
        setAttributeInternal(EXPECTEDSALARY, value);
    }

    /**
     * Gets the attribute value for ProposedSalary, using the alias name ProposedSalary.
     * @return the value of ProposedSalary
     */
    public BigDecimal getProposedSalary() {
        return (BigDecimal) getAttributeInternal(PROPOSEDSALARY);
    }

    /**
     * Sets <code>value</code> as the attribute value for ProposedSalary.
     * @param value value to set the ProposedSalary
     */
    public void setProposedSalary(BigDecimal value) {
        setAttributeInternal(PROPOSEDSALARY, value);
    }

    /**
     * Gets the attribute value for ApplicantAvailability, using the alias name ApplicantAvailability.
     * @return the value of ApplicantAvailability
     */
    public BigDecimal getApplicantAvailability() {
        return (BigDecimal) getAttributeInternal(APPLICANTAVAILABILITY);
    }

    /**
     * Sets <code>value</code> as the attribute value for ApplicantAvailability.
     * @param value value to set the ApplicantAvailability
     */
    public void setApplicantAvailability(BigDecimal value) {
        setAttributeInternal(APPLICANTAVAILABILITY, value);
    }

    /**
     * Gets the attribute value for CreatedBy, using the alias name CreatedBy.
     * @return the value of CreatedBy
     */
    public BigDecimal getCreatedBy() {
        return (BigDecimal) getAttributeInternal(CREATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreatedBy.
     * @param value value to set the CreatedBy
     */
    public void setCreatedBy(BigDecimal value) {
        setAttributeInternal(CREATEDBY, value);
    }

    /**
     * Gets the attribute value for CreationDate, using the alias name CreationDate.
     * @return the value of CreationDate
     */
    public Timestamp getCreationDate() {
        return (Timestamp) getAttributeInternal(CREATIONDATE);
    }

    /**
     * Gets the attribute value for UpdatedBy, using the alias name UpdatedBy.
     * @return the value of UpdatedBy
     */
    public BigDecimal getUpdatedBy() {
        return (BigDecimal) getAttributeInternal(UPDATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for UpdatedBy.
     * @param value value to set the UpdatedBy
     */
    public void setUpdatedBy(BigDecimal value) {
        setAttributeInternal(UPDATEDBY, value);
    }

    /**
     * Gets the attribute value for UpdationDate, using the alias name UpdationDate.
     * @return the value of UpdationDate
     */
    public Timestamp getUpdationDate() {
        return (Timestamp) getAttributeInternal(UPDATIONDATE);
    }

    /**
     * Gets the attribute value for VersionNumber, using the alias name VersionNumber.
     * @return the value of VersionNumber
     */
    public BigDecimal getVersionNumber() {
        return (BigDecimal) getAttributeInternal(VERSIONNUMBER);
    }

    /**
     * Gets the attribute value for ShortList, using the alias name ShortList.
     * @return the value of ShortList
     */
    public String getShortList() {
        return (String) getAttributeInternal(SHORTLIST);
    }

    /**
     * Sets <code>value</code> as the attribute value for ShortList.
     * @param value value to set the ShortList
     */
    public void setShortList(String value) {
        setAttributeInternal(SHORTLIST, value);
    }


    /**
     * Gets the attribute value for InterviewRemarks, using the alias name InterviewRemarks.
     * @return the value of InterviewRemarks
     */
    public String getInterviewRemarks() {
        return (String) getAttributeInternal(INTERVIEWREMARKS);
    }

    /**
     * Sets <code>value</code> as the attribute value for InterviewRemarks.
     * @param value value to set the InterviewRemarks
     */
    public void setInterviewRemarks(String value) {
        setAttributeInternal(INTERVIEWREMARKS, value);
    }


    /**
     * @param applicationId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(BigDecimal applicationId) {
        return new Key(new Object[] { applicationId });
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        String userid = (ADFContext.getCurrent()
                                   .getSessionScope()
                                   .get("userid") == null) ? "-1" : ADFContext.getCurrent()
                                                                              .getSessionScope()
                                                                              .get("userid")
                                                                              .toString();


        switch (operation) {

        case DML_INSERT:


            setUpdatedBy(new BigDecimal(userid));
            setCreatedBy(new BigDecimal(userid));
            setShortList("N");
            createQuestionnaire(getApplicationId().intValue());
            createOrientationTemplate(getApplicationId().intValue());
            break;
        case DML_UPDATE:
            setUpdatedBy(new BigDecimal(userid));

        }
        super.doDML(operation, e);
    }

    private void createOrientationTemplate(int applicationID){
        String userid = (ADFContext.getCurrent()
                                           .getSessionScope()
                                           .get("userid") == null) ? "-1" : ADFContext.getCurrent()
                                                                                      .getSessionScope()
                                                                                      .get("userid")
                                                                                      .toString();
        String insertQuery = "insert into hr_applicant_orientation select hr_applicant_orientation_seq.nextval, " + 
        "    oh.head_id, " + 
        "    ?, " + 
        "    ol.line, 'N', " + 
        "    ?,sysdate, " + 
        "    ?,sysdate,1  " + 
        "from orientation_head oh, " + 
        "    orientation_lines ol " + 
        "    where oh.head_id = ol.head_id";
        
        
        String insertQuery1 = "insert into hr_applicant_orientation_head " + 
        "select hr_applicant_ont_head_s.nextval, " + 
        "    ?, " + 
        "    head_id, " + 
        "    head, " + 
        "    ?, " + 
        "    sysdate, " + 
        "    ?, " + 
        "    sysdate, " + 
        "    1 from orientation_head";
        PreparedStatement pst = null;
        ResultSet rs = null;
        try {
            //for orientation heads
            pst = getDBTransaction().createPreparedStatement(insertQuery1, 0);
            pst.setInt(1, applicationID);
            pst.setInt(2, Integer.parseInt(userid));
            pst.setInt(3, Integer.parseInt(userid));
            pst.executeUpdate();
            
            //for orientation lines
            pst = getDBTransaction().createPreparedStatement(insertQuery, 0);
            pst.setInt(1, applicationID);
            pst.setInt(2, Integer.parseInt(userid));
            pst.setInt(3, Integer.parseInt(userid));
            pst.executeUpdate();
            
        } catch (Exception ex) {
            System.out.println(ex.getMessage()+" - "+applicationID);
        } finally {
            try {
                rs.close();
                pst.close();
            } catch (Exception ex) {

            }

        }
        
    }
    public void createQuestionnaire(int applicationID) {
        
        String userid = (ADFContext.getCurrent()
                                   .getSessionScope()
                                   .get("userid") == null) ? "-1" : ADFContext.getCurrent()
                                                                              .getSessionScope()
                                                                              .get("userid")
                                                                              .toString();
        String insertQuery =
            "insert into hr_application_questionnaire " + "select hr_application_quest_Seq.nextval, " + "       ?, " +
            "       question, " + "       null, " + "       ?, " + "       sysdate, " + "       ?, " +
            "       sysdate, " + "       1 from questionnaire";
        PreparedStatement pst = null;
        ResultSet rs = null;
        try {
            pst = getDBTransaction().createPreparedStatement(insertQuery, 0);
            pst.setInt(1, applicationID);
            pst.setInt(2, Integer.parseInt(userid));
            pst.setInt(3, Integer.parseInt(userid));
            pst.executeUpdate();
            
        } catch (Exception ex) {
            System.out.println(ex.getMessage()+" - "+applicationID);
        } finally {
            try {
                rs.close();
                pst.close();
            } catch (Exception ex) {

            }

        }
    }
}


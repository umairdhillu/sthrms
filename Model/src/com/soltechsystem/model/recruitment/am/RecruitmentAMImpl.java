package com.soltechsystem.model.recruitment.am;

import com.soltechsystem.model.recruitment.LOV.RatingImpl;
import com.soltechsystem.model.recruitment.am.common.RecruitmentAM;

import java.sql.PreparedStatement;

import java.sql.ResultSet;

import oracle.adf.share.ADFContext;

import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Apr 18 20:17:39 PKT 2019
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class RecruitmentAMImpl extends ApplicationModuleImpl implements RecruitmentAM {
    /**
     * This is the default constructor (do not remove).
     */
    public RecruitmentAMImpl() {
    }

    /**
     * Container's getter for HrVacanciesView1.
     * @return HrVacanciesView1
     */
    public ViewObjectImpl getHrVacanciesView1() {
        return (ViewObjectImpl) findViewObject("HrVacanciesView1");
    }

    /**
     * Container's getter for HrApplicationsView1.
     * @return HrApplicationsView1
     */
    public ViewObjectImpl getHrApplicationsView1() {
        return (ViewObjectImpl) findViewObject("HrApplicationsView1");
    }

    /**
     * Container's getter for LOVDegrees1.
     * @return LOVDegrees1
     */
    public ViewObjectImpl getLOVDegrees1() {
        return (ViewObjectImpl) findViewObject("LOVDegrees1");
    }

    /**
     * Container's getter for AdvertisementSource1.
     * @return AdvertisementSource1
     */
    public ViewObjectImpl getAdvertisementSource1() {
        return (ViewObjectImpl) findViewObject("AdvertisementSource1");
    }

    /**
     * Container's getter for VacancyLOV1.
     * @return VacancyLOV1
     */
    public ViewObjectImpl getVacancyLOV1() {
        return (ViewObjectImpl) findViewObject("VacancyLOV1");
    }

    public void deleteFileLinks(String type, int referenceID) {
        PreparedStatement pst;
        try {
            pst =
                getDBTransaction()
                .createPreparedStatement("delete sys_files where file_context = ? and reference_id = ? ", 0);
            pst.setString(1, type);
            pst.setString(2, referenceID + "");
            pst.executeUpdate();

            getDBTransaction().commit();

        } catch (Exception ex) {
            ex.printStackTrace();
        }


    }

    /**
     * Container's getter for InterviewEvaluationView1.
     * @return InterviewEvaluationView1
     */
    public ViewObjectImpl getInterviewEvaluationView1() {
        return (ViewObjectImpl) findViewObject("InterviewEvaluationView1");
    }

    /**
     * Container's getter for Rating1.
     * @return Rating1
     */
    public RatingImpl getRating1() {
        return (RatingImpl) findViewObject("Rating1");
    }

    /**
     * Container's getter for Recommendation1.
     * @return Recommendation1
     */
    public ViewObjectImpl getRecommendation1() {
        return (ViewObjectImpl) findViewObject("Recommendation1");
    }

    /**
     * Container's getter for InterviewEvaluationView2.
     * @return InterviewEvaluationView2
     */
    public ViewObjectImpl getInterviewEvaluationView2() {
        return (ViewObjectImpl) findViewObject("InterviewEvaluationView2");
    }

    /**
     * Container's getter for ApplicationInterviewLink1.
     * @return ApplicationInterviewLink1
     */
    public ViewLinkImpl getApplicationInterviewLink1() {
        return (ViewLinkImpl) findViewLink("ApplicationInterviewLink1");
    }

    
    public String interviewDone(int applicationID) {
        PreparedStatement pst = null;
        ResultSet rs = null;
        
        try {
            pst =
                getDBTransaction()
                .createPreparedStatement("select count(*) cnt " + "from interview_evaluation " +
                                         "where application_id = ?", 0);
            pst.setInt(1, applicationID);
            rs = pst.executeQuery();
            rs.next();
            int count = rs.getInt("cnt");
            return count>0?"DONE":"NOTDONE";
            
        } catch (Exception ex) {
            return "NOTDONE";
        }

    }

    /**
     * Container's getter for QuestionnaireView1.
     * @return QuestionnaireView1
     */
    public ViewObjectImpl getQuestionnaireView1() {
        return (ViewObjectImpl) findViewObject("QuestionnaireView1");
    }

    /**
     * Container's getter for HrApplicationQuestionnaireView1.
     * @return HrApplicationQuestionnaireView1
     */
    public ViewObjectImpl getHrApplicationQuestionnaireView1() {
        return (ViewObjectImpl) findViewObject("HrApplicationQuestionnaireView1");
    }

    /**
     * Container's getter for HrApplicationQuestionnaireView2.
     * @return HrApplicationQuestionnaireView2
     */
    public ViewObjectImpl getHrApplicationQuestionnaireView2() {
        return (ViewObjectImpl) findViewObject("HrApplicationQuestionnaireView2");
    }

    /**
     * Container's getter for ApplicationQuestionViewLink1.
     * @return ApplicationQuestionViewLink1
     */
    public ViewLinkImpl getApplicationQuestionViewLink1() {
        return (ViewLinkImpl) findViewLink("ApplicationQuestionViewLink1");
    }


    /**
     * Container's getter for OrientationHeadView1.
     * @return OrientationHeadView1
     */
    public ViewObjectImpl getOrientationHeadView1() {
        return (ViewObjectImpl) findViewObject("OrientationHeadView1");
    }

    /**
     * Container's getter for OrientationLinesView1.
     * @return OrientationLinesView1
     */
    public ViewObjectImpl getOrientationLinesView1() {
        return (ViewObjectImpl) findViewObject("OrientationLinesView1");
    }

    /**
     * Container's getter for OrientationLink1.
     * @return OrientationLink1
     */
    public ViewLinkImpl getOrientationLink1() {
        return (ViewLinkImpl) findViewLink("OrientationLink1");
    }

    /**
     * Container's getter for HrApplicantOrientationView1.
     * @return HrApplicantOrientationView1
     */
    public ViewObjectImpl getHrApplicantOrientationView1() {
        return (ViewObjectImpl) findViewObject("HrApplicantOrientationView1");
    }


    /**
     * Container's getter for HrApplicantOrientationHeadView1.
     * @return HrApplicantOrientationHeadView1
     */
    public ViewObjectImpl getHrApplicantOrientationHeadView1() {
        return (ViewObjectImpl) findViewObject("HrApplicantOrientationHeadView1");
    }

    /**
     * Container's getter for HrApplicantOrientationHeadView2.
     * @return HrApplicantOrientationHeadView2
     */
    public ViewObjectImpl getHrApplicantOrientationHeadView2() {
        return (ViewObjectImpl) findViewObject("HrApplicantOrientationHeadView2");
    }

    /**
     * Container's getter for ApplicantOrientationHead1.
     * @return ApplicantOrientationHead1
     */
    public ViewLinkImpl getApplicantOrientationHead1() {
        return (ViewLinkImpl) findViewLink("ApplicantOrientationHead1");
    }

    /**
     * Container's getter for HrApplicantOrientationView2.
     * @return HrApplicantOrientationView2
     */
    public ViewObjectImpl getHrApplicantOrientationView2() {
        return (ViewObjectImpl) findViewObject("HrApplicantOrientationView2");
    }

    /**
     * Container's getter for OrientationHeaderLine1.
     * @return OrientationHeaderLine1
     */
    public ViewLinkImpl getOrientationHeaderLine1() {
        return (ViewLinkImpl) findViewLink("OrientationHeaderLine1");
    }

    /**
     * Container's getter for DistrictsLOV1.
     * @return DistrictsLOV1
     */
    public ViewObjectImpl getDistrictsLOV1() {
        return (ViewObjectImpl) findViewObject("DistrictsLOV1");
    }

    /**
     * Container's getter for TehsilLOV1.
     * @return TehsilLOV1
     */
    public ViewObjectImpl getTehsilLOV1() {
        return (ViewObjectImpl) findViewObject("TehsilLOV1");
    }
}


package com.soltechsystem.model.prl.Entity;

import java.math.BigDecimal;

import java.sql.Timestamp;

import oracle.adf.share.ADFContext;

import oracle.jbo.Key;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Dec 20 20:23:14 PKT 2018
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class PrlAllowDeductTrxImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    protected enum AttributesEnum {
        TrxId,
        EmployeeId,
        StartDate,
        EndDate,
        CreatedBy,
        UpdatedBy,
        CreationDate,
        UpdationDate,
        VersionNumber,
        AllowenceDeductionName,
        DeductionType,
        TrxType,
        Val,
        ValueType,
        AllowDeductId,
        Active,
        StartDateType;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        protected int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        protected static final int firstIndex() {
            return firstIndex;
        }

        protected static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        protected static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int TRXID = AttributesEnum.TrxId.index();
    public static final int EMPLOYEEID = AttributesEnum.EmployeeId.index();
    public static final int STARTDATE = AttributesEnum.StartDate.index();
    public static final int ENDDATE = AttributesEnum.EndDate.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int UPDATEDBY = AttributesEnum.UpdatedBy.index();
    public static final int CREATIONDATE = AttributesEnum.CreationDate.index();
    public static final int UPDATIONDATE = AttributesEnum.UpdationDate.index();
    public static final int VERSIONNUMBER = AttributesEnum.VersionNumber.index();
    public static final int ALLOWENCEDEDUCTIONNAME = AttributesEnum.AllowenceDeductionName.index();
    public static final int DEDUCTIONTYPE = AttributesEnum.DeductionType.index();
    public static final int TRXTYPE = AttributesEnum.TrxType.index();
    public static final int VAL = AttributesEnum.Val.index();
    public static final int VALUETYPE = AttributesEnum.ValueType.index();
    public static final int ALLOWDEDUCTID = AttributesEnum.AllowDeductId.index();
    public static final int ACTIVE = AttributesEnum.Active.index();
    public static final int STARTDATETYPE = AttributesEnum.StartDateType.index();

    /**
     * This is the default constructor (do not remove).
     */
    public PrlAllowDeductTrxImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("com.soltechsystem.model.prl.Entity.PrlAllowDeductTrx");
    }


    /**
     * Gets the attribute value for TrxId, using the alias name TrxId.
     * @return the value of TrxId
     */
    public BigDecimal getTrxId() {
        return (BigDecimal) getAttributeInternal(TRXID);
    }

    /**
     * Sets <code>value</code> as the attribute value for TrxId.
     * @param value value to set the TrxId
     */
    public void setTrxId(BigDecimal value) {
        setAttributeInternal(TRXID, value);
    }


    /**
     * Gets the attribute value for EmployeeId, using the alias name EmployeeId.
     * @return the value of EmployeeId
     */
    public BigDecimal getEmployeeId() {
        return (BigDecimal) getAttributeInternal(EMPLOYEEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for EmployeeId.
     * @param value value to set the EmployeeId
     */
    public void setEmployeeId(BigDecimal value) {
        setAttributeInternal(EMPLOYEEID, value);
    }

    /**
     * Gets the attribute value for StartDate, using the alias name StartDate.
     * @return the value of StartDate
     */
    public Timestamp getStartDate() {
        return (Timestamp) getAttributeInternal(STARTDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for StartDate.
     * @param value value to set the StartDate
     */
    public void setStartDate(Timestamp value) {
        setAttributeInternal(STARTDATE, value);
    }

    /**
     * Gets the attribute value for EndDate, using the alias name EndDate.
     * @return the value of EndDate
     */
    public Timestamp getEndDate() {
        return (Timestamp) getAttributeInternal(ENDDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for EndDate.
     * @param value value to set the EndDate
     */
    public void setEndDate(Timestamp value) {
        setAttributeInternal(ENDDATE, value);
    }

    /**
     * Gets the attribute value for CreatedBy, using the alias name CreatedBy.
     * @return the value of CreatedBy
     */
    public BigDecimal getCreatedBy() {
        return (BigDecimal) getAttributeInternal(CREATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreatedBy.
     * @param value value to set the CreatedBy
     */
    public void setCreatedBy(BigDecimal value) {
        setAttributeInternal(CREATEDBY, value);
    }

    /**
     * Gets the attribute value for UpdatedBy, using the alias name UpdatedBy.
     * @return the value of UpdatedBy
     */
    public BigDecimal getUpdatedBy() {
        return (BigDecimal) getAttributeInternal(UPDATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for UpdatedBy.
     * @param value value to set the UpdatedBy
     */
    public void setUpdatedBy(BigDecimal value) {
        setAttributeInternal(UPDATEDBY, value);
    }

    /**
     * Gets the attribute value for CreationDate, using the alias name CreationDate.
     * @return the value of CreationDate
     */
    public Timestamp getCreationDate() {
        return (Timestamp) getAttributeInternal(CREATIONDATE);
    }

    /**
     * Gets the attribute value for UpdationDate, using the alias name UpdationDate.
     * @return the value of UpdationDate
     */
    public Timestamp getUpdationDate() {
        return (Timestamp) getAttributeInternal(UPDATIONDATE);
    }

    /**
     * Gets the attribute value for VersionNumber, using the alias name VersionNumber.
     * @return the value of VersionNumber
     */
    public BigDecimal getVersionNumber() {
        return (BigDecimal) getAttributeInternal(VERSIONNUMBER);
    }

    /**
     * Gets the attribute value for AllowenceDeductionName, using the alias name AllowenceDeductionName.
     * @return the value of AllowenceDeductionName
     */
    public String getAllowenceDeductionName() {
        return (String) getAttributeInternal(ALLOWENCEDEDUCTIONNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for AllowenceDeductionName.
     * @param value value to set the AllowenceDeductionName
     */
    public void setAllowenceDeductionName(String value) {
        setAttributeInternal(ALLOWENCEDEDUCTIONNAME, value);
    }

    /**
     * Gets the attribute value for DeductionType, using the alias name DeductionType.
     * @return the value of DeductionType
     */
    public BigDecimal getDeductionType() {
        return (BigDecimal) getAttributeInternal(DEDUCTIONTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for DeductionType.
     * @param value value to set the DeductionType
     */
    public void setDeductionType(BigDecimal value) {
        setAttributeInternal(DEDUCTIONTYPE, value);
    }

    /**
     * Gets the attribute value for TrxType, using the alias name TrxType.
     * @return the value of TrxType
     */
    public BigDecimal getTrxType() {
        return (BigDecimal) getAttributeInternal(TRXTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for TrxType.
     * @param value value to set the TrxType
     */
    public void setTrxType(BigDecimal value) {
        setAttributeInternal(TRXTYPE, value);
    }

    /**
     * Gets the attribute value for Val, using the alias name Val.
     * @return the value of Val
     */
    public BigDecimal getVal() {
        return (BigDecimal) getAttributeInternal(VAL);
    }

    /**
     * Sets <code>value</code> as the attribute value for Val.
     * @param value value to set the Val
     */
    public void setVal(BigDecimal value) {
        setAttributeInternal(VAL, value);
    }

    /**
     * Gets the attribute value for ValueType, using the alias name ValueType.
     * @return the value of ValueType
     */
    public BigDecimal getValueType() {
        return (BigDecimal) getAttributeInternal(VALUETYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ValueType.
     * @param value value to set the ValueType
     */
    public void setValueType(BigDecimal value) {
        setAttributeInternal(VALUETYPE, value);
    }


    /**
     * Gets the attribute value for AllowDeductId, using the alias name AllowDeductId.
     * @return the value of AllowDeductId
     */
    public BigDecimal getAllowDeductId() {
        return (BigDecimal) getAttributeInternal(ALLOWDEDUCTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for AllowDeductId.
     * @param value value to set the AllowDeductId
     */
    public void setAllowDeductId(BigDecimal value) {
        setAttributeInternal(ALLOWDEDUCTID, value);
    }

    /**
     * Gets the attribute value for Active, using the alias name Active.
     * @return the value of Active
     */
    public String getActive() {
        return (String) getAttributeInternal(ACTIVE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Active.
     * @param value value to set the Active
     */
    public void setActive(String value) {
        setAttributeInternal(ACTIVE, value);
    }

    /**
     * Gets the attribute value for StartDateType, using the alias name StartDateType.
     * @return the value of StartDateType
     */
    public BigDecimal getStartDateType() {
        return (BigDecimal) getAttributeInternal(STARTDATETYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for StartDateType.
     * @param value value to set the StartDateType
     */
    public void setStartDateType(BigDecimal value) {
        setAttributeInternal(STARTDATETYPE, value);
    }

    /**
     * @param trxId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(BigDecimal trxId) {
        return new Key(new Object[] { trxId });
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        String userid = (ADFContext.getCurrent()
                                   .getSessionScope()
                                   .get("userid") == null) ? "-1" : ADFContext.getCurrent()
                                                                              .getSessionScope()
                                                                              .get("userid")
                                                                              .toString();


        switch (operation) {

        case DML_INSERT:


            setUpdatedBy(new BigDecimal(userid));
            setCreatedBy(new BigDecimal(userid));

            break;
        case DML_UPDATE:
            setUpdatedBy(new BigDecimal(userid));

        }
        super.doDML(operation, e);
    }
}


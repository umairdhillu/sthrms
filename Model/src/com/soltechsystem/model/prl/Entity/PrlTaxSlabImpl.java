package com.soltechsystem.model.prl.Entity;

import java.math.BigDecimal;

import java.sql.Timestamp;

import oracle.adf.share.ADFContext;

import oracle.jbo.Key;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Dec 22 23:53:01 PKT 2018
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class PrlTaxSlabImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    protected enum AttributesEnum {
        SlabId,
        SalaryFrom,
        SalaryTo,
        Tax,
        IncomeDeduct,
        Excess,
        CreatedBy,
        CreationDate,
        UpdatedBy,
        UpdationDate,
        VersionNumber;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        protected int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        protected static final int firstIndex() {
            return firstIndex;
        }

        protected static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        protected static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int SLABID = AttributesEnum.SlabId.index();
    public static final int SALARYFROM = AttributesEnum.SalaryFrom.index();
    public static final int SALARYTO = AttributesEnum.SalaryTo.index();
    public static final int TAX = AttributesEnum.Tax.index();
    public static final int INCOMEDEDUCT = AttributesEnum.IncomeDeduct.index();
    public static final int EXCESS = AttributesEnum.Excess.index();
    public static final int CREATEDBY = AttributesEnum.CreatedBy.index();
    public static final int CREATIONDATE = AttributesEnum.CreationDate.index();
    public static final int UPDATEDBY = AttributesEnum.UpdatedBy.index();
    public static final int UPDATIONDATE = AttributesEnum.UpdationDate.index();
    public static final int VERSIONNUMBER = AttributesEnum.VersionNumber.index();

    /**
     * This is the default constructor (do not remove).
     */
    public PrlTaxSlabImpl() {
    }

    /**
     * Gets the attribute value for SlabId, using the alias name SlabId.
     * @return the value of SlabId
     */
    public BigDecimal getSlabId() {
        return (BigDecimal) getAttributeInternal(SLABID);
    }

    /**
     * Sets <code>value</code> as the attribute value for SlabId.
     * @param value value to set the SlabId
     */
    public void setSlabId(BigDecimal value) {
        setAttributeInternal(SLABID, value);
    }

    /**
     * Gets the attribute value for SalaryFrom, using the alias name SalaryFrom.
     * @return the value of SalaryFrom
     */
    public BigDecimal getSalaryFrom() {
        return (BigDecimal) getAttributeInternal(SALARYFROM);
    }

    /**
     * Sets <code>value</code> as the attribute value for SalaryFrom.
     * @param value value to set the SalaryFrom
     */
    public void setSalaryFrom(BigDecimal value) {
        setAttributeInternal(SALARYFROM, value);
    }

    /**
     * Gets the attribute value for SalaryTo, using the alias name SalaryTo.
     * @return the value of SalaryTo
     */
    public BigDecimal getSalaryTo() {
        return (BigDecimal) getAttributeInternal(SALARYTO);
    }

    /**
     * Sets <code>value</code> as the attribute value for SalaryTo.
     * @param value value to set the SalaryTo
     */
    public void setSalaryTo(BigDecimal value) {
        setAttributeInternal(SALARYTO, value);
    }

    /**
     * Gets the attribute value for Tax, using the alias name Tax.
     * @return the value of Tax
     */
    public BigDecimal getTax() {
        return (BigDecimal) getAttributeInternal(TAX);
    }

    /**
     * Sets <code>value</code> as the attribute value for Tax.
     * @param value value to set the Tax
     */
    public void setTax(BigDecimal value) {
        setAttributeInternal(TAX, value);
    }

    /**
     * Gets the attribute value for IncomeDeduct, using the alias name IncomeDeduct.
     * @return the value of IncomeDeduct
     */
    public BigDecimal getIncomeDeduct() {
        return (BigDecimal) getAttributeInternal(INCOMEDEDUCT);
    }

    /**
     * Sets <code>value</code> as the attribute value for IncomeDeduct.
     * @param value value to set the IncomeDeduct
     */
    public void setIncomeDeduct(BigDecimal value) {
        setAttributeInternal(INCOMEDEDUCT, value);
    }

    /**
     * Gets the attribute value for Excess, using the alias name Excess.
     * @return the value of Excess
     */
    public BigDecimal getExcess() {
        return (BigDecimal) getAttributeInternal(EXCESS);
    }

    /**
     * Sets <code>value</code> as the attribute value for Excess.
     * @param value value to set the Excess
     */
    public void setExcess(BigDecimal value) {
        setAttributeInternal(EXCESS, value);
    }

    /**
     * Gets the attribute value for CreatedBy, using the alias name CreatedBy.
     * @return the value of CreatedBy
     */
    public BigDecimal getCreatedBy() {
        return (BigDecimal) getAttributeInternal(CREATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreatedBy.
     * @param value value to set the CreatedBy
     */
    public void setCreatedBy(BigDecimal value) {
        setAttributeInternal(CREATEDBY, value);
    }

    /**
     * Gets the attribute value for CreationDate, using the alias name CreationDate.
     * @return the value of CreationDate
     */
    public Timestamp getCreationDate() {
        return (Timestamp) getAttributeInternal(CREATIONDATE);
    }

    /**
     * Gets the attribute value for UpdatedBy, using the alias name UpdatedBy.
     * @return the value of UpdatedBy
     */
    public BigDecimal getUpdatedBy() {
        return (BigDecimal) getAttributeInternal(UPDATEDBY);
    }

    /**
     * Sets <code>value</code> as the attribute value for UpdatedBy.
     * @param value value to set the UpdatedBy
     */
    public void setUpdatedBy(BigDecimal value) {
        setAttributeInternal(UPDATEDBY, value);
    }

    /**
     * Gets the attribute value for UpdationDate, using the alias name UpdationDate.
     * @return the value of UpdationDate
     */
    public Timestamp getUpdationDate() {
        return (Timestamp) getAttributeInternal(UPDATIONDATE);
    }

    /**
     * Gets the attribute value for VersionNumber, using the alias name VersionNumber.
     * @return the value of VersionNumber
     */
    public BigDecimal getVersionNumber() {
        return (BigDecimal) getAttributeInternal(VERSIONNUMBER);
    }

    /**
     * @param slabId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(BigDecimal slabId) {
        return new Key(new Object[] { slabId });
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("com.soltechsystem.model.prl.Entity.PrlTaxSlab");
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        String userid = (ADFContext.getCurrent()
                                   .getSessionScope()
                                   .get("userid") == null) ? "-1" : ADFContext.getCurrent()
                                                                              .getSessionScope()
                                                                              .get("userid")
                                                                              .toString();


        switch (operation) {

        case DML_INSERT:


            setUpdatedBy(new BigDecimal(userid));
            setCreatedBy(new BigDecimal(userid));
            
            break;
        case DML_UPDATE:
            setUpdatedBy(new BigDecimal(userid));

        }
        super.doDML(operation, e);
    }
}

